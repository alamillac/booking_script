{"version":3,"sources":["login.js","index.js"],"names":["base_url","loginFirstStep","credentials","request","username","password","partialPhone","console","log","response","get","html","data","token_regex","token_re","match","client_id_re","Error","opToken","client_id","request_options","url","method","phones","phones_info","sms","authorizationToken","authorization_token","phoneHash","find","phone","masked","indexOf","hash","smsRequired","tokens","loginSecondStep","options","smsToken","homeUrl","redirect_uri","query","params","sessionParam","split","map","q","key_val","key","val","p","token","session","Booking","state","client","axios","create","withCredentials","timeout","headers","login","completeOptions","Object","assign"],"mappings":"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","file":"index.js","sourceRoot":"../src/bkapi","sourcesContent":["const base_url = \"https://account.booking.com\";\n\n\nasync function loginFirstStep(credentials, request) {\n    const { username, password, partialPhone } = credentials;\n\n    const login_url = \"https://admin.booking.com\";\n    console.log(\"Request: \" + login_url);\n    let response = await request.get(login_url),\n        html = response.data;\n\n    // Get Token\n    console.log(\"Getting token\");\n    const token_regex = /\\\"op_token\\\":\\\"([^\"]+)\\\"/,\n        token_re = html.match(token_regex),\n        client_id_regex = /\\\"client_id\\\":\\\"([^\"]+)\\\"/,\n        client_id_re = html.match(client_id_regex);\n\n    if(!token_re) {\n        throw new Error(\"Token not found!\");\n    }\n\n    if(!client_id_re) {\n        throw new Error(\"Client_id not found!\");\n    }\n\n    const opToken = token_re[1],\n        client_id = client_id_re[1];\n    console.log(\"Token found \" + opToken);\n    console.log(\"Client_id found \" + client_id);\n\n    // Do login\n    console.log(\"Init login\");\n    // login first step\n    let request_options = {\n        url: base_url + \"/account/sign-in/login_name\",\n        data: {\n            \"login_name\": username,\n            \"op_token\": opToken\n        },\n        method: \"POST\"\n    };\n\n    console.log(\"Request: \" + request_options.url);\n    response = await request(request_options);\n\n    // login second step\n    request_options = {\n        url: base_url + \"/account/sign-in/password\",\n        data: {\n            \"login_name\": username,\n            \"password\": password,\n            \"client_id\": client_id,\n            \"state\": \"\",\n            \"code_challenge\": \"\",\n            \"code_challenge_method\": \"\",\n            \"op_token\": opToken\n        },\n        method: \"POST\"\n    }\n    console.log(\"Request: \" + request_options.url);\n    response = await request(request_options);\n    const phones = response.data.phones_info.sms,\n        authorizationToken = response.data.authorization_token;\n\n    const phoneInfo = phones.find((phone) => phone.masked.indexOf(partialPhone) != -1),\n        phoneHash = phoneInfo.hash;\n\n    console.log(\"Init sms verification\");\n    //TODO revisar en la respuesta si es necesaria la verificaciÃ³n\n\n    // Send sms if needed\n    request_options = {\n        url: base_url + \"/account/send/2fa-pin\",\n        data: {\n            \"type\": \"sms\",\n            \"authorization_token\": authorizationToken,\n            \"phone_id\": phoneHash,\n            \"op_token\": opToken\n        },\n        method: \"POST\"\n    };\n    console.log(\"Request: \" + request_options.url);\n    response = await request(request_options);\n\n    const tokens = {opToken, authorizationToken},\n        smsRequired = true;\n    return { smsRequired, tokens };\n}\n\n\nasync function loginSecondStep(options, request) {\n    const { smsToken, authorizationToken, opToken } = options;\n\n    // SMS verification\n    const request_options = {\n        url: base_url + \"/account/sign-in/2fa-pin\",\n        data: {\n            \"type\": \"sms\",\n            \"authorization_token\": authorizationToken,\n            \"second_factor\": smsToken,\n            \"op_token\": opToken\n        },\n        method: \"POST\"\n    }\n    console.log(\"Request: \" + request_options.url);\n    let response = await request(request_options);\n\n    // Redirect to home\n    const homeUrl = response.data.redirect_uri;\n    console.log(\"Request: \" + homeUrl);\n    response = await request.get(homeUrl);\n\n    // Parse Home page\n    console.log(\"Getting session and token from home page\");\n    const html = response.data,\n        query = response.request.url.query; //FIXME\n\n    console.log(\"Debug: query\" + query); //FIXME delete\n\n    const params = query.split('&')\n        .map((q) => {\n            const key_val = q.split('=');\n            return {\n                key: key_val[0],\n                val: key_val[1]\n            }\n        }),\n        sessionParam = params.find((p) => p.key == \"ses\");\n\n    const token_regex = /var token[ ]+= '([^']+)'/,\n        token_re = html.match(token_regex);\n\n    if(!token_re) {\n        throw new Error(\"Token not found in home page!\");\n    }\n    if(!sessionParam) {\n        throw new Error(\"Session not found in home page!\");\n    }\n\n    const tokens = {\n        token: token_re[1],\n        session: sessionParam.val\n    };\n    console.log(\"Debug Tokens: \" + tokens); //FIXME delete\n    console.log(\"Tokens found\");\n   return { tokens };\n}\n\n\nexport {\n    loginFirstStep,\n    loginSecondStep\n};\n","import { loginFirstStep, loginSecondStep } from './login';\nimport axios from 'axios';\n\n\nfunction Booking(credentials) {\n    const state = {\n            tokens: {}\n        },\n        client = axios.create({\n            withCredentials: true,\n            timeout: 2000,\n            headers: {\n                \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0\",\n                \"Accept\": \"*/*\",\n                \"content-type\": \"application/json\",\n                \"x-requested-with\": \"XMLHttpRequest\",\n                \"origin\": \"https://account.booking.com\"\n            },\n        });\n\n    return {\n        login: async (options) => {\n            if(options && options.smsToken) {\n                const completeOptions = Object.assign({}, options, state.tokens);\n                const {tokens} = await loginSecondStep(completeOptions, client);\n                state.tokens = tokens;\n                return {smsRequired: false}\n            }\n            const { smsRequired, tokens } = await loginFirstStep(credentials, client);\n            state.tokens = tokens;\n            return {smsRequired}\n        }\n    }\n}\n\n\nexport {\n    Booking\n};\n"]}