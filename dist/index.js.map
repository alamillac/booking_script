{"version":3,"sources":["login.js","reservations.js","index.js"],"names":["base_url","loginFirstStep","credentials","request","username","password","partialPhone","console","log","response","get","html","data","token_regex","token_re","match","client_id_re","Error","opToken","client_id","request_options","url","login_name","op_token","method","state","code_challenge","code_challenge_method","phones","phones_info","sms","authorizationToken","authorization_token","phoneHash","find","phone","masked","indexOf","hash","type","phone_id","smsRequired","tokens","loginSecondStep","options","smsToken","second_factor","redirect_uri","headers","Accept","url_path","sessionParam","path","split","map","q","key_val","key","val","p","session","searchReservations","dateFrom","dateTo","hotelAccountId","typeOfDates","page","per_page","type_of_dates","date_from","date_to","only_pending_requests","show_cancelled","only_booking_suite","engine_version","hotel_account_id","axios","cookieJar","tough","CookieJar","Booking","client","create","jar","withCredentials","timeout","origin","login","completeOptions","Object","assign"],"mappings":"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","file":"index.js","sourceRoot":"../src/bkapi","sourcesContent":["const base_url = 'https://account.booking.com';\n\nasync function loginFirstStep(credentials, request) {\n    const { username, password, partialPhone } = credentials;\n\n    const login_url = 'https://admin.booking.com';\n    console.log('Request: ' + login_url);\n    let response = await request.get(login_url),\n        html = response.data;\n\n    // Get Token\n    console.log('Getting token');\n    const token_regex = /\\\"op_token\\\":\\\"([^\"]+)\\\"/,\n        token_re = html.match(token_regex),\n        client_id_regex = /\\\"client_id\\\":\\\"([^\"]+)\\\"/,\n        client_id_re = html.match(client_id_regex);\n\n    if (!token_re) {\n        throw new Error('Token not found!');\n    }\n\n    if (!client_id_re) {\n        throw new Error('Client_id not found!');\n    }\n\n    const opToken = token_re[1],\n        client_id = client_id_re[1];\n    console.log('Token found ' + opToken);\n    console.log('Client_id found ' + client_id);\n\n    // Do login\n    console.log('Init login');\n    // login first step\n    let request_options = {\n        url: base_url + '/account/sign-in/login_name',\n        data: {\n            login_name: username,\n            op_token: opToken\n        },\n        method: 'POST'\n    };\n\n    console.log('Request: ' + request_options.url);\n    response = await request(request_options);\n\n    // login second step\n    request_options = {\n        url: base_url + '/account/sign-in/password',\n        data: {\n            login_name: username,\n            password: password,\n            client_id: client_id,\n            state: '',\n            code_challenge: '',\n            code_challenge_method: '',\n            op_token: opToken\n        },\n        method: 'POST'\n    };\n    console.log('Request: ' + request_options.url);\n    response = await request(request_options);\n    const phones = response.data.phones_info.sms,\n        authorizationToken = response.data.authorization_token;\n\n    const phoneInfo = phones.find(\n            phone => phone.masked.indexOf(partialPhone) != -1\n        ),\n        phoneHash = phoneInfo.hash;\n\n    console.log('Init sms verification');\n    //TODO revisar en la respuesta si es necesaria la verificaciÃ³n\n\n    // Send sms if needed\n    request_options = {\n        url: base_url + '/account/send/2fa-pin',\n        data: {\n            type: 'sms',\n            authorization_token: authorizationToken,\n            phone_id: phoneHash,\n            op_token: opToken\n        },\n        method: 'POST'\n    };\n    console.log('Request: ' + request_options.url);\n    response = await request(request_options);\n\n    const tokens = { opToken, authorizationToken },\n        smsRequired = true;\n    return { smsRequired, tokens };\n}\n\nasync function loginSecondStep(options, request) {\n    const { smsToken, authorizationToken, opToken } = options;\n\n    // SMS verification\n    let request_options = {\n        url: base_url + '/account/sign-in/2fa-pin',\n        data: {\n            type: 'sms',\n            authorization_token: authorizationToken,\n            second_factor: smsToken,\n            op_token: opToken\n        },\n        method: 'POST'\n    };\n    console.log('Request: ' + request_options.url);\n    let response = await request(request_options);\n\n    // Redirect to home\n    request_options = {\n        url: response.data.redirect_uri,\n        method: 'GET',\n        headers: {\n            Accept:\n                'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'\n        }\n    };\n    console.log('Request: ' + request_options.url);\n    response = await request(request_options);\n\n    // Get session from Home page\n    console.log('Getting session and token from home page');\n    const url_path = response.request.path,\n        query = url_path.split('?')[1];\n\n    const params = query.split('&').map(q => {\n            const key_val = q.split('=');\n            return {\n                key: key_val[0],\n                val: key_val[1]\n            };\n        }),\n        sessionParam = params.find(p => p.key == 'ses');\n\n    if (!sessionParam) {\n        throw new Error('Session not found in home page!');\n    }\n\n    const tokens = {\n        session: sessionParam.val\n    };\n    console.log('Tokens found');\n    return { tokens };\n}\n\nexport { loginFirstStep, loginSecondStep };\n","const base_url = 'https://admin.booking.com';\n\nasync function searchReservations(options, session, request) {\n    const { dateFrom, dateTo, hotelAccountId } = options;\n    const typeOfDates = options.typeOfDates || 'arrival';\n\n    const request_options = {\n        url: `${base_url}/fresa/extranet/group/reservations/search_reservations?lang=xu&ses=${session}`,\n        method: 'POST',\n        headers: {\n            Accept: 'application/json, text/plain, */*',\n            'content-type': 'application/json'\n        },\n        data: {\n            page: 1,\n            per_page: 50,\n            type_of_dates: typeOfDates,\n            date_from: dateFrom,\n            date_to: dateTo,\n            only_pending_requests: false,\n            show_cancelled: false,\n            only_booking_suite: false,\n            engine_version: 1,\n            hotel_account_id: hotelAccountId\n        }\n    };\n    console.log('Request: ' + request_options.url);\n    return await request(request_options);\n}\n\nexport { searchReservations };\n","import { loginFirstStep, loginSecondStep } from './login';\nimport { searchReservations } from './reservations';\nimport axios from 'axios';\n\nimport axiosCookieJarSupport from 'axios-cookiejar-support';\nimport tough from 'tough-cookie';\n\naxiosCookieJarSupport(axios);\nconst cookieJar = new tough.CookieJar();\n\nfunction Booking(credentials) {\n    const state = {\n            tokens: {}\n        },\n        client = axios.create({\n            jar: cookieJar,\n            withCredentials: true,\n            timeout: 2000,\n            headers: {\n                'User-Agent':\n                    'Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0',\n                Accept: '*/*',\n                'content-type': 'application/json',\n                'x-requested-with': 'XMLHttpRequest',\n                origin: 'https://account.booking.com'\n            }\n        });\n\n    return {\n        login: async ({ smsToken = null }) => {\n            if (smsToken) {\n                const completeOptions = Object.assign(\n                    {},\n                    options,\n                    state.tokens\n                );\n                const { tokens } = await loginSecondStep(\n                    completeOptions,\n                    client\n                );\n                state.tokens = tokens;\n                return { smsRequired: false };\n            }\n            const { smsRequired, tokens } = await loginFirstStep(\n                credentials,\n                client\n            );\n            state.tokens = tokens;\n            return { smsRequired };\n        },\n        searchReservations: async options => {\n            if (!state.tokens.session) {\n                throw new Error('Login required');\n            }\n            return searchReservations(\n                options,\n                state.tokens.session,\n                client\n            );\n        }\n    };\n}\n\nexport { Booking };\n"]}