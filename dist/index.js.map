{"version":3,"sources":["login.js","reservations.js","properties.js","index.js"],"names":["base_url","getAuthToken","html","console","log","token_regex","token_re","match","client_id_re","Error","opToken","clientId","signIn","options","request","username","password","request_options","url","data","login_name","op_token","method","response","client_id","state","code_challenge","code_challenge_method","loginFirstStep","credentials","partialPhone","get","signInResponse","phones","phones_info","sms","authorizationToken","authorization_token","phoneHash","find","phone","masked","indexOf","hash","type","phone_id","smsRequired","tokens","loginSecondStep","smsToken","second_factor","redirect_uri","headers","Accept","url_path","sessionParam","path","split","map","q","key_val","key","val","p","session","getAmount","strAmount","parseFloat","replace","getCurrency","searchReservations","dateFrom","dateTo","hotelAccountId","typeOfDates","page","per_page","type_of_dates","date_from","date_to","only_pending_requests","show_cancelled","only_booking_suite","engine_version","hotel_account_id","getCardFromReservation","hotelId","reservationId","authorizationUrlRe","authorizationUrlMatch","authorizationUrl","$","cheerio","load","cardDetails","charged","availableBalance","currency","cardNumber","cardType","cardHolderName","expirationDate","CVC","chargedMatch","slice","each","i","el","$td","eq","text","value","join","listProperties","filters","limit","offset","sort_by","axios","cookieJar","tough","CookieJar","Booking","client","create","jar","withCredentials","timeout","origin","login","completeOptions","Object","assign"],"mappings":"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","file":"index.js","sourceRoot":"../src/bkapi","sourcesContent":["const base_url = 'https://account.booking.com';\n\nfunction getAuthToken(html) {\n    console.log('Getting token');\n    const token_regex = /\\\"op_token\\\":\\\"([^\"]+)\\\"/,\n        token_re = html.match(token_regex),\n        client_id_regex = /\\\"client_id\\\":\\\"([^\"]+)\\\"/,\n        client_id_re = html.match(client_id_regex);\n\n    if (!token_re) {\n        throw new Error('Token not found!');\n    }\n\n    if (!client_id_re) {\n        throw new Error('Client_id not found!');\n    }\n\n    return {\n        opToken: token_re[1],\n        clientId: client_id_re[1]\n    };\n}\n\nasync function signIn(options, request) {\n    const { username, opToken, password, clientId } = options;\n\n    // login first step\n    let request_options = {\n        url: base_url + '/account/sign-in/login_name',\n        data: {\n            login_name: username,\n            op_token: opToken\n        },\n        method: 'POST'\n    };\n\n    console.log('Request: ' + request_options.url);\n    let response = await request(request_options);\n\n    // login second step\n    request_options = {\n        url: base_url + '/account/sign-in/password',\n        data: {\n            login_name: username,\n            password: password,\n            client_id: clientId,\n            state: '',\n            code_challenge: '',\n            code_challenge_method: '',\n            op_token: opToken\n        },\n        method: 'POST'\n    };\n    console.log('Request: ' + request_options.url);\n    response = await request(request_options);\n    return response.data;\n}\n\nasync function loginFirstStep(credentials, request) {\n    const { username, password, partialPhone } = credentials;\n\n    const login_url = 'https://admin.booking.com';\n    console.log('Request: ' + login_url);\n    let response = await request.get(login_url),\n        html = response.data;\n\n    // Get Token\n    const { opToken, clientId } = getAuthToken(html);\n\n    // Do login\n    console.log('Init login');\n    const signInResponse = await signIn(\n        { username, opToken, password, clientId },\n        request\n    );\n    const phones = signInResponse.phones_info.sms,\n        authorizationToken = signInResponse.authorization_token;\n\n    const phoneInfo = phones.find(\n            phone => phone.masked.indexOf(partialPhone) != -1\n        ),\n        phoneHash = phoneInfo.hash;\n\n    console.log('Init sms verification');\n    //TODO revisar en la respuesta si es necesaria la verificaci√≥n\n\n    // Send sms if needed\n    const request_options = {\n        url: base_url + '/account/send/2fa-pin',\n        data: {\n            type: 'sms',\n            authorization_token: authorizationToken,\n            phone_id: phoneHash,\n            op_token: opToken\n        },\n        method: 'POST'\n    };\n    console.log('Request: ' + request_options.url);\n    response = await request(request_options);\n\n    const tokens = { opToken, authorizationToken },\n        smsRequired = true;\n    return { smsRequired, tokens };\n}\n\nasync function loginSecondStep(options, request) {\n    const { smsToken, authorizationToken, opToken } = options;\n\n    // SMS verification\n    let request_options = {\n        url: base_url + '/account/sign-in/2fa-pin',\n        data: {\n            type: 'sms',\n            authorization_token: authorizationToken,\n            second_factor: smsToken,\n            op_token: opToken\n        },\n        method: 'POST'\n    };\n    console.log('Request: ' + request_options.url);\n    let response = await request(request_options);\n\n    // Redirect to home\n    request_options = {\n        url: response.data.redirect_uri,\n        method: 'GET',\n        headers: {\n            Accept:\n                'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'\n        }\n    };\n    console.log('Request: ' + request_options.url);\n    response = await request(request_options);\n\n    // Get session from Home page\n    console.log('Getting session and token from home page');\n    const url_path = response.request.path,\n        query = url_path.split('?')[1];\n\n    const params = query.split('&').map(q => {\n            const key_val = q.split('=');\n            return {\n                key: key_val[0],\n                val: key_val[1]\n            };\n        }),\n        sessionParam = params.find(p => p.key == 'ses');\n\n    if (!sessionParam) {\n        throw new Error('Session not found in home page!');\n    }\n\n    const tokens = {\n        session: sessionParam.val\n    };\n    console.log('Tokens found');\n    return { tokens };\n}\n\nexport { loginFirstStep, loginSecondStep, signIn, getAuthToken };\n","import { signIn, getAuthToken } from './login';\nimport cheerio from 'cheerio';\n\nconst base_url = 'https://admin.booking.com';\n\nfunction getAmount(strAmount) {\n    return parseFloat(strAmount.replace(/[^0-9.]/g, ''));\n}\n\nfunction getCurrency(strAmount) {\n    return strAmount.replace(/[0-9.]/g, '');\n}\n\nasync function searchReservations(options, session, request) {\n    const { dateFrom, dateTo, hotelAccountId } = options;\n    const typeOfDates = options.typeOfDates || 'arrival';\n\n    const request_options = {\n        url: `${base_url}/fresa/extranet/group/reservations/search_reservations?lang=xu&ses=${session}`,\n        method: 'POST',\n        headers: {\n            Accept: 'application/json, text/plain, */*',\n            'content-type': 'application/json'\n        },\n        data: {\n            page: 1,\n            per_page: 50,\n            type_of_dates: typeOfDates,\n            date_from: dateFrom,\n            date_to: dateTo,\n            only_pending_requests: false,\n            show_cancelled: false,\n            only_booking_suite: false,\n            engine_version: 1,\n            hotel_account_id: hotelAccountId\n        }\n    };\n    console.log('Request: ' + request_options.url);\n    const response = await request(request_options);\n    return response.data;\n}\n\nasync function getCardFromReservation(\n    options,\n    credentials,\n    session,\n    request\n) {\n    const { hotelId, reservationId } = options;\n    const { username, password } = credentials;\n\n    // Get authorization url\n    let request_options = {\n        //url: `${base_url}/hotel/hoteladmin/extranet_ng/manage/booking.html?res_id=${reservationId}&hotel_id=${hotelId}&lang=xu&ses=${session}&date_from=2019-06-10&date_to=2019-06-11&date_type=arrival`,\n        url: `${base_url}/hotel/hoteladmin/extranet_ng/manage/booking.html?res_id=${reservationId}&hotel_id=${hotelId}&lang=xu&ses=${session}`,\n        method: 'GET',\n        headers: {\n            Accept:\n                'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'\n        }\n    };\n    console.log('Request: ' + request_options.url);\n    let response = await request(request_options),\n        html = response.data;\n    const authorizationUrlRe = /href=\\\"(https:\\/\\/account.booking.com\\/oauth2\\/authorize[^\"]+)\\\"/,\n        authorizationUrlMatch = html.match(authorizationUrlRe);\n\n    if (!authorizationUrlMatch) {\n        throw new Error('Reservation detail not found!');\n    }\n\n    // Sign in\n    const authorizationUrl = authorizationUrlMatch[1];\n    console.log('Request: ' + authorizationUrl);\n    response = await request.get(authorizationUrl);\n    html = response.data;\n\n    const { opToken, clientId } = getAuthToken(html);\n    const signInResponse = await signIn(\n        { username, opToken, password, clientId },\n        request\n    );\n\n    // Redirect to home\n    request_options = {\n        url: signInResponse.redirect_uri,\n        method: 'GET',\n        headers: {\n            Accept:\n                'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'\n        }\n    };\n    console.log('Request: ' + request_options.url);\n    response = await request(request_options);\n    html = response.data;\n\n    // Parsing html to get card info\n    const $ = cheerio.load(html);\n    const cardDetails = {\n        reservationId: reservationId,\n        charged: 0,\n        availableBalance: 0,\n        currency: '',\n        cardNumber: '',\n        cardType: '',\n        cardHolderName: '',\n        expirationDate: '',\n        CVC: ''\n    };\n    const chargedRe = /You've already charged\\s+<span>([^<]+)<\\/span>/,\n        chargedMatch = html.match(chargedRe);\n\n    if (chargedMatch) {\n        cardDetails.charged = getAmount(chargedMatch[1]);\n    }\n    $('table table tr')\n        .slice(1)\n        .each((i, el) => {\n            const $td = $(el).find('td');\n            const key = $td.eq(0).text(),\n                value = $td.eq(1).text();\n            switch (key) {\n                case 'Available balance:':\n                    cardDetails.availableBalance = getAmount(value);\n                    cardDetails.currency = getCurrency(value);\n                    break;\n                case 'Card type:':\n                    cardDetails.cardType = value;\n                    break;\n                case 'Card number:':\n                    cardDetails.cardNumber = value\n                        .split(' ')\n                        .join('');\n                    break;\n                case \"Card holder's name:\":\n                    cardDetails.cardHolderName = value;\n                    break;\n                case 'Expiration Date:':\n                    cardDetails.expirationDate = value\n                        .split(' ')\n                        .join('');\n                    break;\n                case 'CVC Code:':\n                    cardDetails.CVC = value;\n                    break;\n            }\n        });\n\n    if (cardDetails.availableBalance === 0) {\n        console.log(html);\n    }\n    return cardDetails;\n}\n\nexport { searchReservations, getCardFromReservation };\n","const base_url = 'https://admin.booking.com';\n\nasync function listProperties({ hotelAccountId }, session, request) {\n    const request_options = {\n        url: `${base_url}/fresa/extranet/group/home/list_properties?lang=xu&ses=${session}`,\n        method: 'POST',\n        headers: {\n            Accept: 'application/json, text/plain, */*',\n            'content-type': 'application/json'\n        },\n        data: {\n            filters: '{\"search_term\":\"\",\"show_closed\":1}',\n            hotel_account_id: hotelAccountId,\n            limit: 30,\n            offset: 0,\n            sort_by: '{\"field_name\":\"property_id\",\"ascending\":false}'\n        }\n    };\n    console.log('Request: ' + request_options.url);\n    const response = await request(request_options);\n    return response.data;\n}\n\nexport { listProperties };\n","import { loginFirstStep, loginSecondStep } from './login';\nimport {\n    searchReservations,\n    getCardFromReservation\n} from './reservations';\nimport { listProperties } from './properties';\nimport axios from 'axios';\n\nimport axiosCookieJarSupport from 'axios-cookiejar-support';\nimport tough from 'tough-cookie';\n\naxiosCookieJarSupport(axios);\nconst cookieJar = new tough.CookieJar();\n\nfunction Booking(credentials) {\n    const state = {\n            tokens: {}\n        },\n        client = axios.create({\n            jar: cookieJar,\n            withCredentials: true,\n            timeout: 10000,\n            headers: {\n                'User-Agent':\n                    'Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0',\n                Accept: '*/*',\n                'content-type': 'application/json',\n                'x-requested-with': 'XMLHttpRequest',\n                origin: 'https://account.booking.com'\n            }\n        });\n\n    return {\n        login: async options => {\n            if (options && options.smsToken) {\n                const completeOptions = Object.assign(\n                    {},\n                    options,\n                    state.tokens\n                );\n                const { tokens } = await loginSecondStep(\n                    completeOptions,\n                    client\n                );\n                state.tokens = tokens;\n                return { smsRequired: false };\n            }\n            const { smsRequired, tokens } = await loginFirstStep(\n                credentials,\n                client\n            );\n            state.tokens = tokens;\n            return { smsRequired };\n        },\n        searchReservations: async options => {\n            if (!state.tokens.session) {\n                throw new Error('Login required');\n            }\n            return searchReservations(\n                options,\n                state.tokens.session,\n                client\n            );\n        },\n        listProperties: async options => {\n            if (!state.tokens.session) {\n                throw new Error('Login required');\n            }\n            return listProperties(\n                options,\n                state.tokens.session,\n                client\n            );\n        },\n        getCardFromReservation: async options => {\n            if (!state.tokens.session) {\n                throw new Error('Login required');\n            }\n            return getCardFromReservation(\n                options,\n                credentials,\n                state.tokens.session,\n                client\n            );\n        }\n    };\n}\n\nexport { Booking };\n"]}