{"version":3,"sources":["login.js","index.js"],"names":["login_url","base_url","loginFirstStep","credentials","request","username","password","partialPhone","response","get","html","data","console","log","token_regex","token_re","match","client_id_re","Error","opToken","client_id","request_options","url","method","phones","phones_info","sms","authorizationToken","authorization_token","phoneHash","find","phone","masked","indexOf","hash","smsRequired","tokens","loginSecondStep","options","smsToken","redirect_uri","sessionParam","query","split","map","q","key_val","key","val","p","token","session","Booking","state","client","axios","create","withCredentials","timeout","headers","login","completeOptions","Object","assign"],"mappings":";AAgIC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,EAAA,QAAA,gBAAA,EAhID,MAAMA,EAAY,4BACdC,EAAW,8BAGf,eAAeC,EAAeC,EAAaC,GACjC,MAAA,SAAEC,EAAF,SAAYC,EAAZ,aAAsBC,GAAiBJ,EAEzCK,IAAAA,QAAiBJ,EAAQK,IAAIT,GAC7BU,EAAOF,EAASG,KAGpBC,QAAQC,IAAI,iBACNC,MACFC,EAAWL,EAAKM,MADA,4BAGhBC,EAAeP,EAAKM,MADF,6BAGnB,IAACD,EACM,MAAA,IAAIG,MAAM,oBAGjB,IAACD,EACM,MAAA,IAAIC,MAAM,wBAGdC,MAAAA,EAAUJ,EAAS,GACrBK,EAAYH,EAAa,GAC7BL,QAAQC,IAAI,eAAiBM,GAC7BP,QAAQC,IAAI,mBAAqBO,GAGjCR,QAAQC,IAAI,cAENQ,MAAAA,EAAkB,CACpBC,IAAKrB,EAAW,8BAChBU,KAAM,CACYN,WAAAA,EACFc,SAAAA,GAEhBI,OAAQ,QAGZX,QAAQC,IAAI,YAAcQ,EAAgBC,KAC1Cd,QAAiBJ,EAAQiB,GAGzBA,EAAgBC,IAAMrB,EAAW,4BACjCoB,EAAgBV,KAAO,CACLN,WAAAA,EACFC,SAAAA,EACCc,UAAAA,EACJ,MAAA,GACS,eAAA,GACO,sBAAA,GACbD,SAAAA,GAEhBP,QAAQC,IAAI,YAAcQ,EAAgBC,KAEpCE,MAAAA,GADNhB,QAAiBJ,EAAQiB,IACDV,KAAKc,YAAYC,IACrCC,EAAqBnB,EAASG,KAAKiB,oBAGnCC,EADcL,EAAOM,KAAMC,IAAiD,GAAvCA,EAAMC,OAAOC,QAAQ1B,IACpC2B,KAE1BtB,QAAQC,IAAI,yBAGL,MAAA,CAAEsB,aADS,EACIC,OAFP,CAACjB,QAAAA,EAASU,UAAAA,EAAWF,mBAAAA,IAMxC,eAAeU,EAAgBC,EAASlC,GAC9B,MAAA,SAAEmC,EAAF,mBAAYZ,EAAZ,QAAgCR,EAAhC,UAAyCU,GAAcS,EAGvDjB,EAAkB,CACpBC,IAAKrB,EAAW,wBAChBU,KAAM,CACM,KAAA,MACegB,oBAAAA,EACXE,SAAAA,EACAV,SAAAA,GAEhBI,OAAQ,QAEZX,QAAQC,IAAI,YAAcQ,EAAgBC,KACtCd,IAAAA,QAAiBJ,EAAQiB,GAE7BA,EAAgBC,IAAMrB,EAAW,2BACjCoB,EAAgBV,KAAO,CACX,KAAA,MACegB,oBAAAA,EACNY,cAAAA,EACLpB,SAAAA,GAEhBP,QAAQC,IAAI,YAAcQ,EAAgBC,KAC1Cd,QAAiBJ,EAAQiB,GAInBX,MAAAA,GAHNF,QAAiBJ,EAAQK,IAAID,EAASG,KAAK6B,eAGrB7B,KAWlB8B,EAVQjC,EAASJ,QAAQkB,IAAIoB,MAEZC,MAAM,KACtBC,IAAKC,IACIC,MAAAA,EAAUD,EAAEF,MAAM,KACjB,MAAA,CACHI,IAAKD,EAAQ,GACbE,IAAKF,EAAQ,MAGChB,KAAMmB,GAAe,OAATA,EAAEF,KAGpChC,EAAWL,EAAKM,MADA,4BAGjB,IAACD,EACM,MAAA,IAAIG,MAAM,iCAEjB,IAACuB,EACM,MAAA,IAAIvB,MAAM,mCAOd,MAAA,CAAEkB,OAJO,CACXc,MAAOnC,EAAS,GAChBoC,QAASV,EAAaO;;AC5F7B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EAjCD,IAAA,EAAA,QAAA,WACA,EAAA,EAAA,QAAA,UAgCC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA7BD,SAASI,EAAQjD,GACPkD,MAAAA,EAAQ,CACNjB,OAAQ,IAEZkB,EAASC,EAAMC,QAAAA,OAAO,CAClBC,iBAAiB,EACjBC,QAAS,IACTC,QAAS,CACS,aAAA,uEACJ,OAAA,MACM,eAAA,mBACI,mBAAA,iBACV,OAAA,iCAIf,MAAA,CACHC,MAAO,MAAA,IACAtB,GAAAA,GAAWA,EAAQC,SAAU,CACtBsB,MAAAA,EAAkBC,OAAOC,OAAO,GAAIzB,EAASe,EAAMjB,SACnD,OAACA,SAAgB,EAAgByB,EAAAA,iBAAAA,EAAiBP,GAEjD,OADPD,EAAMjB,OAASA,EACR,CAACD,aAAa,GAEnB,MAAA,YAAEA,EAAF,OAAeC,SAAiB,EAAejC,EAAAA,gBAAAA,EAAamD,GAE3D,OADPD,EAAMjB,OAASA,EACR,CAACD,YAAAA","file":"index.js","sourceRoot":"../src/bkapi","sourcesContent":["const login_url = \"https://admin.booking.com\",\n    base_url = \"https://account.booking.com\";\n\n\nasync function loginFirstStep(credentials, request) {\n    const { username, password, partialPhone } = credentials;\n\n    let response = await request.get(login_url),\n        html = response.data;\n\n    // Get Token\n    console.log(\"Getting token\");\n    const token_regex = /\\\"op_token\\\":\\\"([^\"]+)\\\"/,\n        token_re = html.match(token_regex),\n        client_id_regex = /\\\"client_id\\\":\\\"([^\"]+)\\\"/,\n        client_id_re = html.match(client_id_regex);\n\n    if(!token_re) {\n        throw new Error(\"Token not found!\");\n    }\n\n    if(!client_id_re) {\n        throw new Error(\"Client_id not found!\");\n    }\n\n    const opToken = token_re[1],\n        client_id = client_id_re[1];\n    console.log(\"Token found \" + opToken);\n    console.log(\"Client_id found \" + client_id);\n\n    // Do login\n    console.log(\"Init login\");\n    // login first step\n    const request_options = {\n        url: base_url + \"/account/sign-in/login_name\",\n        data: {\n            \"login_name\": username,\n            \"op_token\": opToken\n        },\n        method: \"POST\"\n    };\n\n    console.log(\"Request: \" + request_options.url);\n    response = await request(request_options);\n\n    // login second step\n    request_options.url = base_url + \"/account/sign-in/password\";\n    request_options.data = {\n        \"login_name\": username,\n        \"password\": password,\n        \"client_id\": client_id,\n        \"state\": \"\",\n        \"code_challenge\": \"\",\n        \"code_challenge_method\": \"\",\n        \"op_token\": opToken\n    };\n    console.log(\"Request: \" + request_options.url);\n    response = await request(request_options);\n    const phones = response.data.phones_info.sms,\n        authorizationToken = response.data.authorization_token;\n\n    const phoneInfo = phones.find((phone) => phone.masked.indexOf(partialPhone) != -1),\n        phoneHash = phoneInfo.hash;\n\n    console.log(\"Init sms verification\");\n    const tokens = {opToken, phoneHash, authorizationToken},\n        smsRequired = true; //TODO revisar en la respuesta si es necesaria la verificaciÃ³n\n    return { smsRequired, tokens };\n}\n\n\nasync function loginSecondStep(options, request) {\n    const { smsToken, authorizationToken, opToken, phoneHash } = options;\n\n    // SMS verification\n    const request_options = {\n        url: base_url + \"/account/send/2fa-pin\",\n        data: {\n            \"type\": \"sms\",\n            \"authorization_token\": authorizationToken,\n            \"phone_id\": phoneHash,\n            \"op_token\": opToken\n        },\n        method: \"POST\"\n    };\n    console.log(\"Request: \" + request_options.url);\n    let response = await request(request_options);\n\n    request_options.url = base_url + \"/account/sign-in/2fa-pin\"\n    request_options.data = {\n        \"type\": \"sms\",\n        \"authorization_token\": authorizationToken,\n        \"second_factor\": smsToken,\n        \"op_token\": opToken\n    }\n    console.log(\"Request: \" + request_options.url);\n    response = await request(request_options);\n    response = await request.get(response.data.redirect_uri);\n\n    // Parse Home page\n    const html = response.data,\n        query = response.request.url.query; //FIXME\n\n    const params = query.split('&')\n        .map((q) => {\n            const key_val = q.split('=');\n            return {\n                key: key_val[0],\n                val: key_val[1]\n            }\n        }),\n        sessionParam = params.find((p) => p.key == \"ses\");\n\n    const token_regex = /var token[ ]+= '([^']+)'/,\n        token_re = html.match(token_regex);\n\n    if(!token_re) {\n        throw new Error(\"Token not found in home page!\");\n    }\n    if(!sessionParam) {\n        throw new Error(\"Session not found in home page!\");\n    }\n\n    const tokens = {\n        token: token_re[1],\n        session: sessionParam.val\n    };\n   return { tokens };\n}\n\n\nexport {\n    loginFirstStep,\n    loginSecondStep\n};\n","import { loginFirstStep, loginSecondStep } from './login';\nimport axios from 'axios';\n\n\nfunction Booking(credentials) {\n    const state = {\n            tokens: {}\n        },\n        client = axios.create({\n            withCredentials: true,\n            timeout: 2000,\n            headers: {\n                \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0\",\n                \"Accept\": \"*/*\",\n                \"content-type\": \"application/json\",\n                \"x-requested-with\": \"XMLHttpRequest\",\n                \"origin\": \"https://account.booking.com\"\n            },\n        });\n\n    return {\n        login: async (options) => {\n            if(options && options.smsToken) {\n                const completeOptions = Object.assign({}, options, state.tokens);\n                const {tokens} = await loginSecondStep(completeOptions, client);\n                state.tokens = tokens;\n                return {smsRequired: false}\n            }\n            const { smsRequired, tokens } = await loginFirstStep(credentials, client);\n            state.tokens = tokens;\n            return {smsRequired}\n        }\n    }\n}\n\n\nexport {\n    Booking\n};\n"]}