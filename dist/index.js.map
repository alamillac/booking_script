{"version":3,"sources":["login.js","reservations.js","properties.js","index.js"],"names":["base_url","getSessionFromUrl","urlPath","console","log","query","sessionParam","split","map","q","key_val","key","val","find","p","Error","getAuthToken","html","token_regex","token_re","match","client_id_re","opToken","clientId","signIn","options","request","username","password","request_options","url","data","login_name","op_token","method","response","client_id","state","code_challenge","code_challenge_method","loginFirstStep","credentials","partialPhone","get","signInResponse","undefined","redirect_uri","commonHeaders","defaults","headers","Accept","Referer","maxRedirects","validateStatus","status","location","smsRequired","tokens","session","path","phones","phones_info","sms","authorizationToken","authorization_token","phoneHash","phone","masked","indexOf","hash","type","phone_id","loginSecondStep","smsToken","second_factor","login","getSms","getAmount","strAmount","parseFloat","replace","getCurrency","getInputs","$form","inputs","each","i","el","attribs","name","value","searchReservations","dateFrom","dateTo","hotelAccountId","typeOfDates","page","per_page","type_of_dates","date_from","date_to","only_pending_requests","show_cancelled","only_booking_suite","engine_version","hotel_account_id","getCardFromReservation","hotelId","reservationId","authorizationUrlRe","authorizationUrlMatch","authorizationUrl","includes","secureBaseUrl","$","cheerio","load","urlAction","attr","formData","dest","check_pin_auth","message_type","ask_pin","phone_id_call","phone_id_sms","$phoneOption","phoneNumber","text","phoneId","transformRequest","common","queryString","stringify","hotel_id","ses","account_id","pulse","pcip","from_pulse","cardDetails","charged","availableBalance","currency","cardNumber","cardType","cardHolderName","expirationDate","CVC","chargedMatch","slice","$td","eq","join","warn","listProperties","filters","limit","offset","sort_by","Booking","getSmsfn","cookiePath","cookieJar","tough","CookieJar","cookieStore","client","axios","create","jar","withCredentials","timeout","origin","doLogin","getCardsFromReservations","optionsList","length","cardResponse","push"],"mappings":"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","file":"index.js","sourceRoot":"../src/bkapi","sourcesContent":["const base_url = 'https://account.booking.com';\n\nfunction getSessionFromUrl(urlPath) {\n    // Get session from Home page\n    console.log('Getting session and token from home page');\n    const query = urlPath.split('?')[1];\n\n    const params = query.split('&').map(q => {\n            const key_val = q.split('=');\n            return {\n                key: key_val[0],\n                val: key_val[1]\n            };\n        }),\n        sessionParam = params.find(p => p.key == 'ses');\n\n    if (!sessionParam) {\n        throw new Error('Session not found in home page!');\n    }\n\n    console.log('Session found');\n    return sessionParam.val;\n}\n\nfunction getAuthToken(html) {\n    console.log('Getting token');\n    const token_regex = /\\\"op_token\\\":\\\"([^\"]+)\\\"/,\n        token_re = html.match(token_regex),\n        client_id_regex = /\\\"client_id\\\":\\\"([^\"]+)\\\"/,\n        client_id_re = html.match(client_id_regex);\n\n    if (!token_re) {\n        throw new Error('Token not found!');\n    }\n\n    if (!client_id_re) {\n        throw new Error('Client_id not found!');\n    }\n\n    return {\n        opToken: token_re[1],\n        clientId: client_id_re[1]\n    };\n}\n\nasync function signIn(options, request) {\n    const { username, opToken, password, clientId } = options;\n\n    // login first step\n    let request_options = {\n        url: base_url + '/account/sign-in/login_name',\n        data: {\n            login_name: username,\n            op_token: opToken\n        },\n        method: 'POST'\n    };\n\n    console.log('Request: ' + request_options.url);\n    let response = await request(request_options);\n\n    // login second step\n    request_options = {\n        url: base_url + '/account/sign-in/password',\n        data: {\n            login_name: username,\n            password: password,\n            client_id: clientId,\n            state: '',\n            code_challenge: '',\n            code_challenge_method: '',\n            op_token: opToken\n        },\n        method: 'POST'\n    };\n    console.log('Request: ' + request_options.url);\n    response = await request(request_options);\n    return response.data;\n}\n\nasync function loginFirstStep(credentials, request) {\n    const { username, password, partialPhone } = credentials;\n\n    const login_url = 'https://admin.booking.com';\n    console.log('Request: ' + login_url);\n    let response = await request.get(login_url),\n        html = response.data;\n\n    // Get Token\n    const { opToken, clientId } = getAuthToken(html);\n\n    // Do login\n    console.log('Init login');\n    const signInResponse = await signIn(\n        { username, opToken, password, clientId },\n        request\n    );\n    if (signInResponse.redirect_uri !== undefined) {\n        // Login without 2FA\n\n        // Remove common headers\n        const commonHeaders = {\n            'content-type': request.defaults.headers['content-type'],\n            'x-requested-with':\n                request.defaults.headers['x-requested-with']\n        };\n        delete request.defaults.headers['content-type'];\n        delete request.defaults.headers['x-requested-with'];\n\n        // Init redirect\n        let request_options = {\n            url: signInResponse.redirect_uri,\n            method: 'GET',\n            headers: {\n                Accept:\n                    'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n                Referer: 'https://account.booking.com/'\n            },\n            maxRedirects: 0,\n            validateStatus: function(status) {\n                return status === 302;\n            }\n        };\n        console.log('Request: ' + request_options.url);\n        response = await request(request_options);\n\n        request_options = {\n            url: response.headers.location,\n            method: 'GET',\n            headers: {\n                Accept:\n                    'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n                Referer: 'https://account.booking.com/'\n            },\n            maxRedirects: 0,\n            validateStatus: function(status) {\n                return status === 302;\n            }\n        };\n        console.log('Request: ' + request_options.url);\n        response = await request(request_options);\n\n        // Redirect to home\n        request_options = {\n            url:\n                'https://admin.booking.com' +\n                response.headers.location, //Fix stupid redirection\n            method: 'GET',\n            headers: {\n                Accept:\n                    'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n                Referer: 'https://account.booking.com/'\n            },\n            maxRedirects: 0\n        };\n        console.log('Request: ' + request_options.url);\n        response = await request(request_options);\n\n        // Set common headers\n        request.defaults.headers['content-type'] =\n            commonHeaders['content-type'];\n        request.defaults.headers['x-requested-with'] =\n            commonHeaders['x-requested-with'];\n\n        // Get session from response\n        const tokens = {\n                session: getSessionFromUrl(response.request.path)\n            },\n            smsRequired = false;\n        return { smsRequired, tokens };\n    }\n\n    // 2FA is required\n    const phones = signInResponse.phones_info.sms,\n        authorizationToken = signInResponse.authorization_token;\n\n    const phoneInfo = phones.find(\n            phone => phone.masked.indexOf(partialPhone) != -1\n        ),\n        phoneHash = phoneInfo.hash;\n\n    console.log('Init sms verification');\n\n    // Send sms if needed\n    const request_options = {\n        url: base_url + '/account/send/2fa-pin',\n        data: {\n            type: 'sms',\n            authorization_token: authorizationToken,\n            phone_id: phoneHash,\n            op_token: opToken\n        },\n        method: 'POST'\n    };\n    console.log('Request: ' + request_options.url);\n    response = await request(request_options);\n\n    const tokens = { opToken, authorizationToken },\n        smsRequired = true;\n    return { smsRequired, tokens };\n}\n\nasync function loginSecondStep(options, request) {\n    const { smsToken, authorizationToken, opToken } = options;\n\n    // SMS verification\n    let request_options = {\n        url: base_url + '/account/sign-in/2fa-pin',\n        data: {\n            type: 'sms',\n            authorization_token: authorizationToken,\n            second_factor: smsToken,\n            op_token: opToken\n        },\n        method: 'POST'\n    };\n    console.log('Request: ' + request_options.url);\n    let response = await request(request_options);\n\n    // Redirect to home\n    request_options = {\n        url: response.data.redirect_uri,\n        method: 'GET',\n        headers: {\n            Accept:\n                'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'\n        }\n    };\n    console.log('Request: ' + request_options.url);\n    response = await request(request_options);\n\n    return {\n        session: getSessionFromUrl(response.request.path)\n    };\n}\n\nasync function login(credentials, getSms, request) {\n    const { smsRequired, tokens } = await loginFirstStep(\n        credentials,\n        request\n    );\n    if (!smsRequired) {\n        return tokens;\n    }\n\n    const smsToken = await getSms();\n    tokens.smsToken = smsToken;\n\n    return await loginSecondStep(tokens, request);\n}\n\nexport { login, signIn, getAuthToken };\n","import { signIn, getAuthToken } from './login';\nimport cheerio from 'cheerio';\nimport queryString from 'query-string';\n\nconst base_url = 'https://admin.booking.com';\n\nfunction getAmount(strAmount) {\n    return parseFloat(strAmount.replace(/[^0-9.]/g, ''));\n}\n\nfunction getCurrency(strAmount) {\n    return strAmount.replace(/[0-9.]/g, '');\n}\n\nfunction getInputs($form) {\n    const inputs = {},\n        $inputs = $form.find('input');\n\n    $inputs.each((i, el) => {\n        inputs[el.attribs.name] = el.attribs.value;\n    });\n    return inputs;\n}\n\nasync function searchReservations(options, session, request) {\n    const { dateFrom, dateTo, hotelAccountId } = options;\n    const typeOfDates = options.typeOfDates || 'arrival';\n\n    const request_options = {\n        url: `${base_url}/fresa/extranet/group/reservations/search_reservations?lang=xu&ses=${session}`,\n        method: 'POST',\n        headers: {\n            Accept: 'application/json, text/plain, */*',\n            'content-type': 'application/json'\n        },\n        data: {\n            page: 1,\n            per_page: 50,\n            type_of_dates: typeOfDates,\n            date_from: dateFrom,\n            date_to: dateTo,\n            only_pending_requests: false,\n            show_cancelled: false,\n            only_booking_suite: false,\n            engine_version: 1,\n            hotel_account_id: hotelAccountId\n        }\n    };\n    console.log('Request: ' + request_options.url);\n    const response = await request(request_options);\n    return response.data;\n}\n\nasync function getCardFromReservation(\n    options,\n    credentials,\n    session,\n    getSms,\n    request\n) {\n    const { hotelId, reservationId } = options;\n    const { username, password } = credentials;\n\n    // Get authorization url\n    let request_options = {\n        url: `${base_url}/hotel/hoteladmin/extranet_ng/manage/booking.html?res_id=${reservationId}&hotel_id=${hotelId}&lang=xu&ses=${session}`,\n        method: 'GET',\n        headers: {\n            Accept:\n                'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'\n        }\n    };\n    console.log('Request: ' + request_options.url);\n    let response = await request(request_options),\n        html = response.data;\n    const authorizationUrlRe = /href=\\\"(https:\\/\\/account.booking.com\\/oauth2\\/authorize[^\"]+)\\\"/,\n        authorizationUrlMatch = html.match(authorizationUrlRe);\n\n    if (!authorizationUrlMatch) {\n        throw new Error('Reservation detail not found!');\n    }\n\n    // Sign in\n    const authorizationUrl = authorizationUrlMatch[1];\n    console.log('Request: ' + authorizationUrl);\n    response = await request.get(authorizationUrl);\n    html = response.data;\n\n    const { opToken, clientId } = getAuthToken(html);\n    const signInResponse = await signIn(\n        { username, opToken, password, clientId },\n        request\n    );\n\n    // Redirect to home\n    request_options = {\n        url: signInResponse.redirect_uri,\n        method: 'GET',\n        headers: {\n            Accept:\n                'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'\n        }\n    };\n    console.log('Request: ' + request_options.url);\n    response = await request(request_options);\n    html = response.data;\n\n    if (html.includes('Please choose a verification method')) {\n        // 2FA is required\n        console.log('2FA required');\n        const { partialPhone } = credentials,\n            secureBaseUrl = 'https://secure-admin.booking.com/2fa/';\n\n        // Select phone number and send sms\n        let $ = cheerio.load(html),\n            $form = $('form#select_phone_number'),\n            urlAction = $form.attr('action'),\n            inputs = getInputs($form),\n            formData = {\n                dest: inputs.dest,\n                check_pin_auth: inputs.check_pin_auth,\n                message_type: 'sms',\n                ask_pin: '',\n                phone_id: '',\n                phone_id_call: '',\n                phone_id_sms: ''\n            };\n\n        $form.find('option').each((i, el) => {\n            const $phoneOption = $(el);\n            const phoneNumber = $phoneOption.text();\n            if (phoneNumber.includes(partialPhone)) {\n                const phoneId = $phoneOption.val();\n                formData.phone_id = phoneId;\n                formData.phone_id_call = phoneId;\n                formData.phone_id_sms = phoneId;\n            }\n        });\n        request_options = {\n            url: secureBaseUrl + urlAction, // 2fa/verify.html\n            data: formData,\n            method: 'POST',\n            headers: {\n                Accept:\n                    'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n                'content-type': 'application/x-www-form-urlencoded',\n                Referer: secureBaseUrl + response.request.path\n            },\n            transformRequest: [\n                (data, headers) => {\n                    delete headers.common['x-requested-with'];\n                    return queryString.stringify(data);\n                }\n            ]\n        };\n        console.log('Request: ' + request_options.url);\n        response = await request(request_options); // send sms token\n        html = response.data;\n\n        // Get sms and validate it\n        $ = cheerio.load(html);\n        $form = $('form#enter_security_pin');\n        urlAction = $form.attr('action');\n        const smsToken = await getSms();\n        inputs = getInputs($form);\n        formData = {\n            ask_pin: smsToken,\n            hotel_id: inputs.hotel_id,\n            ses: inputs.ses,\n            account_id: inputs.account_id,\n            dest: inputs.dest,\n            pulse: 0,\n            pcip: '',\n            from_pulse: '',\n            check_pin_auth: inputs.check_pin_auth\n        };\n        request_options = {\n            url: secureBaseUrl + urlAction, // 2fa/confirm.html\n            data: formData,\n            method: 'POST',\n            headers: {\n                Accept:\n                    'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n                'content-type': 'application/x-www-form-urlencoded',\n                Referer: secureBaseUrl + response.request.path\n            },\n            transformRequest: [\n                (data, headers) => {\n                    delete headers.common['x-requested-with'];\n                    return queryString.stringify(data);\n                }\n            ]\n        };\n        console.log('Request: ' + request_options.url);\n        response = await request(request_options);\n        html = response.data;\n    }\n\n    // Parsing html to get card info\n    const $ = cheerio.load(html);\n    const cardDetails = {\n        reservationId: reservationId,\n        charged: 0,\n        availableBalance: 0,\n        currency: '',\n        cardNumber: '',\n        cardType: '',\n        cardHolderName: '',\n        expirationDate: '',\n        CVC: ''\n    };\n    const chargedRe = /You've already charged\\s+<span>([^<]+)<\\/span>/,\n        chargedMatch = html.match(chargedRe);\n\n    if (chargedMatch) {\n        cardDetails.charged = getAmount(chargedMatch[1]);\n    }\n    $('table table tr')\n        .slice(1)\n        .each((i, el) => {\n            const $td = $(el).find('td');\n            const key = $td.eq(0).text(),\n                value = $td.eq(1).text();\n            switch (key) {\n                case 'Available balance:':\n                    cardDetails.availableBalance = getAmount(value);\n                    cardDetails.currency = getCurrency(value);\n                    break;\n                case 'Card type:':\n                    cardDetails.cardType = value;\n                    break;\n                case 'Card number:':\n                    cardDetails.cardNumber = value\n                        .split(' ')\n                        .join('');\n                    break;\n                case \"Card holder's name:\":\n                    cardDetails.cardHolderName = value;\n                    break;\n                case 'Expiration Date:':\n                    cardDetails.expirationDate = value\n                        .split(' ')\n                        .join('');\n                    break;\n                case 'CVC Code:':\n                    cardDetails.CVC = value;\n                    break;\n            }\n        });\n\n    if (cardDetails.availableBalance === 0) {\n        console.warn('Posible error detected');\n    }\n    return cardDetails;\n}\n\nexport { searchReservations, getCardFromReservation };\n","const base_url = 'https://admin.booking.com';\n\nasync function listProperties({ hotelAccountId }, session, request) {\n    const request_options = {\n        url: `${base_url}/fresa/extranet/group/home/list_properties?lang=xu&ses=${session}`,\n        method: 'POST',\n        headers: {\n            Accept: 'application/json, text/plain, */*',\n            'content-type': 'application/json'\n        },\n        data: {\n            filters: '{\"search_term\":\"\",\"show_closed\":1}',\n            hotel_account_id: hotelAccountId,\n            limit: 30,\n            offset: 0,\n            sort_by: '{\"field_name\":\"property_id\",\"ascending\":false}'\n        }\n    };\n    console.log('Request: ' + request_options.url);\n    const response = await request(request_options);\n    return response.data;\n}\n\nexport { listProperties };\n","import { login } from './login';\nimport {\n    searchReservations,\n    getCardFromReservation\n} from './reservations';\nimport { listProperties } from './properties';\nimport axios from 'axios';\n\nimport axiosCookieJarSupport from 'axios-cookiejar-support';\nimport tough from 'tough-cookie';\nimport cookieStore from 'tough-cookie-file-store';\n\naxiosCookieJarSupport(axios);\n\nfunction Booking(\n    credentials,\n    getSmsfn,\n    cookiePath = '/tmp/bookingCookie.json'\n) {\n    let cookieJar;\n    if (cookiePath) {\n        cookieJar = new tough.CookieJar(new cookieStore(cookiePath));\n    } else {\n        cookieJar = new tough.CookieJar();\n    }\n    const state = {\n            session: null\n        },\n        client = axios.create({\n            jar: cookieJar,\n            withCredentials: true,\n            timeout: 10000,\n            headers: {\n                'User-Agent':\n                    'Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0',\n                Accept: '*/*',\n                'content-type': 'application/json',\n                'x-requested-with': 'XMLHttpRequest',\n                origin: 'https://account.booking.com'\n            }\n        });\n\n    async function doLogin() {\n        const { session } = await login(\n            credentials,\n            getSmsfn,\n            client\n        );\n        return session;\n    }\n\n    return {\n        searchReservations: async options => {\n            if (!state.session) {\n                state.session = await doLogin();\n            }\n            return searchReservations(options, state.session, client);\n        },\n        listProperties: async options => {\n            if (!state.session) {\n                state.session = await doLogin();\n            }\n            return listProperties(options, state.session, client);\n        },\n        getCardsFromReservations: async optionsList => {\n            if (optionsList.length == 0) {\n                return [];\n            }\n            if (!state.session) {\n                state.session = await doLogin();\n            }\n            const response = [];\n            for (let options of optionsList) {\n                // We can't do this on parallel\n                const cardResponse = await getCardFromReservation(\n                    options,\n                    credentials,\n                    state.session,\n                    getSmsfn,\n                    client\n                );\n                response.push(cardResponse);\n            }\n            return response;\n        }\n    };\n}\n\nexport { Booking };\n"]}